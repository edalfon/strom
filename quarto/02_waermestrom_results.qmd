---
title: "Wärmestrom"
execute:
  echo: true
  eval: false
---

```{python}
#| include: false
%load_ext sql
%sql duckdb:///./duckdb/strom.duckdb
```


```{python}
#| include: false
%%sql
SELECT * FROM waermestrom_minute;
```


# Wärmestrom average consumption

```{python}
#| echo: false
%%sql

SELECT 
  MIN(value),
  MAX(value),
  MAX(value) - MIN(value) AS cmtot,

  MIN(date),
  MAX(date),
  date_sub('minute', MIN(date), MAX(date)) AS mintot, 

  24.0 * 60.0 * cmtot / mintot AS avgcm,
  365.0 * avgcm as avgcy,
  0.2479 * avgcy AS avgyearexpend
FROM waermestrom
;
```


```{python}
#| echo: false
%%sql

SELECT 
  tarif,
  MIN(value),
  MAX(value),
  MAX(value) - MIN(value) AS cmtot,
  cmtot / max(cmtot) OVER () AS frac,

  MIN(date),
  MAX(date),
  date_sub('minute', MIN(date), MAX(date)) AS mintot, 


  24.0 * 60.0 * cmtot / mintot AS avgcm,
  365.0 * avgcm as avgcy,
  0.2479 * avgcy AS avgyearexpend
FROM (
  UNPIVOT waermestrom
  ON value, value_hoch, value_niedrig
  INTO
    NAME tarif
    VALUE value
)
GROUP BY tarif
ORDER BY tarif
;
```



# Wärmestrom consumption per day

```{python}
#| include: false
%%sql

waermestrom_per_day << SELECT 
  minute::DATE AS date,
  24.0 * 60.0 * AVG(cm) AS cd,
  24.0 * 60.0 * AVG(cm_hoch) AS cd_hoch,
  24.0 * 60.0 * AVG(cm_niedrig) AS cd_niedrig,
  cd_hoch / (cd_niedrig + cd_hoch) AS hoch_frac2,
  cd_hoch / cd AS hoch_frac
FROM waermestrom_minute
GROUP BY minute::DATE
;
```


```{python}
import plotly.express as px
fig = px.bar(waermestrom_per_day, y='cd', x='date')
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
            dict(count=15, label="15d", step="day", stepmode="backward"),
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(step="all")
        ])
    )
)
fig.update_xaxes(rangeslider_thickness = 0.1)
fig.show()
```

Wärmestrom zeigt natürlich das saisonale Muster. Es gibt einen hohen und volatilen Verbrauch in der Heizperiode und einen niedrigeren, weniger volatilen Verbrauch in den wärmeren Monaten. Offensichtlich beträgt der normale Verbrauch ohne Heizung etwa 3-4 kWh. Das ist wahrscheinlich nur für Warmwasser. Der Verbrauch an Urlaubstagen beträgt 2,69 kWh. Ist das einfach, um das Wasser warm zu halten?

Der Verbrauch in der Heizperiode liegt zwischen 12 und bis zu 50 kWh. Vermutlich stark abhängig von der Außentemperatur.

Overlay temperature
Was ist am 25-26 Juli passiert?, warum im sommer solcher hoher verbreauch?

# Hoch und Niedrig tarif

Preis unterschied zwischen Hoch- und Niedrigtarif ist nicht so groß. 1 o 2 cent. 
Zub Beispiel, für 2024, es wird 27,63 fürs Hochtarif und 26,29 fürs Niedrigtarif.

at durchschnitliche Verbrauch von 12 Kwh pro Tag, das Kostet 3.31 Euro in der Hochtarif und
3.15 Euro in der Niedrigtarif. Die Jährliche durschschnit Verbrauch von 4,400 Kwh heist 1,215 Euro vs. 1157 Euro pro jahr. ALso, wenig al 60 Euro Unterschied im Jahr, wenn alle Verbrauch in einen Tarif wäre.

Also, es ist nich viel relevant. 

Trotzdem, schau ma moi wir war der verlauf von denen. But let's aggregate at weekly level; the daily plot just basically shows that the weekends its only niedrig.

```{python}
#| include: false
%%sql

waermestrom_per_week << SELECT 
  DATE_TRUNC('week', minute) AS week_start,
  24.0 * 60.0 * AVG(cm) AS cd,
  24.0 * 60.0 * AVG(cm_hoch) AS cd_hoch,
  24.0 * 60.0 * AVG(cm_niedrig) AS cd_niedrig,
  cd_hoch / (cd_niedrig + cd_hoch) AS hoch_frac2,
  cd_hoch / cd AS hoch_frac
FROM waermestrom_minute
GROUP BY DATE_TRUNC('week', minute)
;
```

```{python}
import plotly.express as px
fig = px.bar(waermestrom_per_week, y='hoch_frac', x='week_start')
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
            dict(count=15, label="15d", step="day", stepmode="backward"),
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(step="all")
        ])
    )
)
fig.update_xaxes(rangeslider_thickness = 0.1)
fig.show()
```



