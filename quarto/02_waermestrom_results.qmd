---
title: "Wärmestrom"
execute:
  echo: false
  eval: true
---

```{python}
#| include: false
%load_ext sql
%sql --section duck
```


```{python}
#| include: false
%%sql
SELECT * FROM strom_minute
WHERE meterid <> 1
;
```

```{python}
#| include: false
%%sql
SELECT * FROM strom
WHERE meterid <> 1
;
```


<details><summary>Note on how to calculate consumption</summary>
<p>

Note that minute-level granularity makes it possible to calculate simple (unweighted)
averages of the consumption per minute `cm` to extrapolate to periods. Thus, for a whole 
period (e.g. one day fully extended to minute-level) summing and averaging cm 
(times minutes in the period) are equivalent.
```{python}
%%sql

SELECT 
24.0 * 60.0 * AVG(cm) AS averaging_cm,
SUM(cm) AS summing_cm,
FROM strom_minute
WHERE meterid = 1
AND minute::DATE = '2024-07-09'
```

But be careful, when dealing with wärmestrom, you actually have two different meters,
so in averaging, the denominator will be twice the number of minutes, and you would
need to account for that.
```{python}
%%sql

SELECT 
24.0 * 60.0 * AVG(cm) AS averaging_cm,
SUM(cm) AS summing_cm,
FROM strom_minute
WHERE meterid <> 1
AND minute::DATE = '2024-07-09'
```
```{python}
%%sql

SELECT 
2 * (24.0 * 60.0 * AVG(cm)) AS averaging_cm,
SUM(cm) AS summing_cm,
FROM strom_minute
WHERE meterid <> 1
AND minute::DATE = '2024-07-09'
```

</p>
</details>



# Wärmestrom average consumption

```{python}
%%sql

SELECT 
  MIN(value) AS Min,
  MAX(value) AS Max,

  MIN(date) AS First,
  MAX(date) AS Last,
  date_sub('minute', First, Last) AS Mins, 

  2 * (24.0 * 60.0 * AVG(cm)) AS "Use/Day", 
  24.0 * 60.0 * SUM(cm) / Mins AS "check", 

  365.0 * "Use/Day" AS "Use/Year",
  0.3894 * "Use/Year" AS "Yearly Exp"
FROM strom_minute
WHERE meterid <> 1
;
```


```{python}
#| echo: false
%%sql

SELECT
  MIN(value) AS Min,
  MAX(value) AS Max,

  MIN(date) AS First,
  MAX(date) AS Last,
  date_sub('minute', First, Last) AS Mins, 

  2 * (24.0 * 60.0 * AVG(cm)) AS "Use/Day", 
  24.0 * 60.0 * SUM(cm) / Mins AS "check", 

  365.0 * "Use/Day" AS "Use/Year",
  0.3894 * "Use/Year" AS "Yearly Exp"
FROM strom_minute
WHERE meterid <> 1
GROUP BY meterid
;
```


<details><summary>pro Jahr</summary>
<p>

```{python}
#| include: true
%%sql

SELECT 
  year(minute) AS year,
  MIN(value) AS Min,
  MAX(value) AS Max,

  MIN(date) AS First,
  MAX(date) AS Last,
  date_sub('minute', First, Last) AS Mins, 

  2 * (24.0 * 60.0 * AVG(cm)) AS "Use/Day", 
  24.0 * 60.0 * SUM(cm) / Mins AS "check", 

  365.0 * "Use/Day" AS "Use/Year",
  0.3894 * "Use/Year" AS "Yearly Exp"
FROM strom_minute
WHERE meterid <> 1
GROUP BY year(minute)
;
```

</p>
</details>



# Wärmestrom consumption per day

```{python}
#| include: false
%%sql

waermestrom_per_day << SELECT 
  minute::DATE AS date,
  SUM(cm) AS cd,
FROM strom_minute
WHERE meterid <> 1
GROUP BY minute::DATE
;
```


```{python}
import plotly.express as px

fig = px.bar(waermestrom_per_day, y="cd", x="date")
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list(
            [
                dict(count=15, label="15d", step="day", stepmode="backward"),
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(step="all"),
            ]
        )
    ),
    range=[
        "2022-12-01",
        waermestrom_per_day["date"].max(),
    ],
)
fig.update_xaxes(rangeslider_thickness=0.1)
fig.show()
```

Wärmestrom zeigt natürlich das saisonale Muster. Es gibt einen hohen und volatilen Verbrauch in der Heizperiode und einen niedrigeren, weniger volatilen Verbrauch in den wärmeren Monaten. Offensichtlich beträgt der normale Verbrauch ohne Heizung etwa 3-4 kWh. Das ist wahrscheinlich nur für Warmwasser. Der Verbrauch an Urlaubstagen beträgt 2,69 kWh. Ist das einfach, um das Wasser warm zu halten?

Der Verbrauch in der Heizperiode liegt zwischen 12 und bis zu 50 kWh. Vermutlich stark abhängig von der Außentemperatur.

Overlay temperature
Was ist am 25-26 Juli passiert?, warum im sommer solcher hoher verbreauch?, Wartung?

# Hoch und Niedrig tarif

Preis unterschied zwischen Hoch- und Niedrigtarif ist nicht so groß. 1 o 2 cent. 
Zub Beispiel, für 2024, es wird 27,63 fürs Hochtarif und 26,29 fürs Niedrigtarif.

at durchschnitliche Verbrauch von 12 Kwh pro Tag, das Kostet 3.31 Euro in der Hochtarif und
3.15 Euro in der Niedrigtarif. Die Jährliche durschschnit Verbrauch von 4,400 Kwh heist 1,215 Euro vs. 1157 Euro pro jahr. ALso, wenig al 60 Euro Unterschied im Jahr, wenn alle Verbrauch in einen Tarif wäre.

Also, es ist nich viel relevant. 

Trotzdem, schau ma moi wir war der verlauf von denen. But let's aggregate at weekly level; the daily plot just basically shows that the weekends its only niedrig.

```{python}
#| include: false
%%sql

waermestrom_per_week << SELECT 
  DATE_TRUNC('week', minute) AS week_start,
  SUM(cm) AS cd,
  SUM(CASE WHEN meterid = 3 THEN cm ELSE 0 END) AS cd_hoch,
  cd_hoch / cd AS hoch_frac
FROM strom_minute
WHERE meterid <> 1
GROUP BY DATE_TRUNC('week', minute)
;
```

```{python}
import plotly.express as px

fig = px.bar(waermestrom_per_week, y="hoch_frac", x="week_start")
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list(
            [
                dict(count=15, label="15d", step="day", stepmode="backward"),
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(step="all"),
            ]
        )
    ),
)
fig.update_xaxes(rangeslider_thickness=0.1)
fig.show()
```



