---
title: "Strom Dashboard"
format: dashboard
---

# Die gesamte Periode

```{python}
#| include: false
import strom
normalstrom_consumption = strom.read_result("normalstrom_consumption")
waermestrom_consumption = strom.read_result("waermestrom_consumption")

strom_per_day = strom.read_result("make_strom_per_day")

# other icons: lightbulb, thermometer-sun
```

## Row

```{python}
#| title: "Normal Strom"
```

```{python}
#| content: valuebox
#| title: "Normalstromverbrauch pro Tag"
dict(
  icon = "lightning-charge",
  color = "light",
  value = "{:.1f} kWh".format(normalstrom_consumption["Use/Day"].values[0])
)
```

```{python}
#| content: valuebox
#| title: "Normalstromverbrauch im Jahr"
dict(
  icon = "activity",
  color = "light",
  value = "{:.0f} kWh".format(normalstrom_consumption["Use/Year"].values[0])
)
```

```{python}
#| title: "Wärmestrom"
```

```{python}
#| content: valuebox
#| title: "Wärmestromverbrauch pro Tag"
dict(
  icon = "lightning-charge",
  color = "light",
  value = "{:.1f} kWh".format(waermestrom_consumption["Use/Day"].values[0])
)
```

```{python}
#| content: valuebox
#| title: "Wärmestromverbrauch im Jahr"
dict(
  icon = "activity",
  color = "light",
  value = "{:.0f} kWh".format(waermestrom_consumption["Use/Year"].values[0])
)
```

## Row

```{python}
#| content: valuebox
#| title: "Normalstrom Kosten pro Tag"
dict(
  icon = "currency-exchange",
  color = "#e0a931",
  value = "{:.1f} €".format(normalstrom_consumption["Daily Exp"].values[0])
)
```

```{python}
#| content: valuebox
#| title: "Normalstrom Kosten im Jahr"
dict(
  icon = "credit-card",
  color = "#e0a931",
  value = "{:.0f} €".format(normalstrom_consumption["Yearly Exp"].values[0])
)
```

```{python}
#| content: valuebox
#| title: "Wärmestrom Kosten pro Tag"
dict(
  icon = "currency-exchange",
  color = "#e3b32d",
  value = "{:.1f} €".format(waermestrom_consumption["Daily Exp"].values[0])
)
```

```{python}
#| content: valuebox
#| title: "Wärmestrom Kosten im Jahr"
dict(
  icon = "credit-card",
  color = "#e3b32d",
  value = "{:.0f} €".format(waermestrom_consumption["Yearly Exp"].values[0])
)
```

## Row

```{python}
# | eval: true
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

fig = px.bar(strom_per_day, y="nd", x="date")
fig = fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list(
            [
                dict(count=15, label="15d", step="day", stepmode="backward"),
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(step="all"),
            ]
        )
    ),
    range=[
        strom_per_day["date"].max() - timedelta(days=365),
        strom_per_day["date"].max(),
    ],
)
fig = fig.update_xaxes(rangeslider_thickness=0.1)
fig = fig.update_layout(xaxis_title=None, yaxis_title="kWh / Tag")
fig
```

```{python}
# | eval: true
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

fig = px.bar(strom_per_day, y="wd", x="date")
fig = fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list(
            [
                dict(count=15, label="15d", step="day", stepmode="backward"),
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(step="all"),
            ]
        )
    ),
    range=[
        strom_per_day["date"].max() - timedelta(days=365),
        strom_per_day["date"].max(),
    ],
)
fig = fig.update_xaxes(rangeslider_thickness=0.1)
fig = fig.update_layout(xaxis_title=None, yaxis_title="kWh / Tag")
fig
```

# Die letzten 5 Tage

```{python}
daily, average = strom.read_result("last_5_days")
```

{{< include Dashboard/_periods.qmd >}}

# Die letzten 15 Tage

```{python}
daily, average = strom.read_result("last_15_days")
```

{{< include Dashboard/_periods.qmd >}}

# Die letzten 30 Tage

```{python}
daily, average = strom.read_result("last_30_days")
```

{{< include Dashboard/_periods.qmd >}}

# Die letzten 60 Tage

```{python}
daily, average = strom.read_result("last_60_days")
```

{{< include Dashboard/_periods.qmd >}}

# Die letzten 90 Tage

```{python}
daily, average = strom.read_result("last_90_days")
```

{{< include Dashboard/_periods.qmd >}}

# Die letzten 365 Tage

```{python}
daily, average = strom.read_result("last_365_days")
```

{{< include Dashboard/_periods.qmd >}}


