---
title: "Naive Model"
execute:
  echo: false
  eval: true
---

```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import epyfun

import strom

X_train, y_train, X_test, y_test = strom.read_result("split_data")
```


# Naive model

A simple OLS model with temperature and air humidity, without any
transformation or feature engineering -no thinking at all-.

```{python}
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

from sklego.preprocessing import ColumnSelector

pipe = Pipeline(
    [
        ("vars", ColumnSelector(columns=["tt_tu_mean", "rf_tu_mean"])),
        ("model", LinearRegression()),
    ]
)
```

{{< include _assess_model.qmd >}}

# TODOs

Clearly the naive model is not a good fit (as expected).

::: {#lst-naive}
- [X] It needs a polynomial with the temperature (second order perhaps)
- [X] Check if the association with relative humidity, if it is just an artifact of the 
      correlation with temperature, or if there might something meaningful going on there
- [X] and bring other climatic data, rainfall and snowfall might be relevant
:::




<details><summary>Naive Model, but using statsmodels ...</summary>
<p>
```{python}
strom_climate = strom.read_result("merge_strom_climate_data")

import statsmodels.api as sm
import pandas as pd

y_var = "wd"
X_vars = ["tt_tu_mean", "rf_tu_mean"]

y = strom_climate[y_var]
X = strom_climate[X_vars]
rest = strom_climate.drop(columns=y_var)
X = sm.add_constant(X)

model = sm.OLS(y, X).fit()

print(model.summary())

# Extract R-squared value
r_squared = model.rsquared
print(f"R-squared: {r_squared}")

# epyfun.reload_all()
```
</p>
</details>


<details><summary>Naive model, but using scikit-learn without pipeline ...</summary>
<p>
```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import epyfun
import strom

import strom
strom_climate = strom.read_result("merge_strom_climate_data")
#strom_climate = pd.read_parquet("interim/strom_climate.parquet")

y_var = "wd"
X_vars = ['tt_tu_mean', 'rf_tu_mean']

y = strom_climate[y_var]
X = strom_climate[X_vars]
rest = strom_climate.drop(columns = y_var)
```


```{python}
#| eval: false
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score


model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)
print(r2_score(y, y_pred))

strom.log_vetiver(model, "waermestrom")
```

</p>
</details>

